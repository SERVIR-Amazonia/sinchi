/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-71.42833478544651, -0.4710745453900222],
          [-71.28555757004561, -0.4642040686029912],
          [-71.28279257339491, -0.3392525511020995],
          [-71.43109766013782, -0.34748871459006164]]]),
    Region_100K = ee.FeatureCollection("projects/pc300-samz-sinchi/assets/Region_100K");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Configurar constantes utilizadas en el script.
var CLOUD_FILTER = 70;  // Filtrará imágenes donde más del 70% de los píxeles estén cubiertos por nubes.
var CLD_PRB_THRESH = 40;  // Umbral de probabilidad de nube para clasificar píxeles como nube o no nube basado en el modelo s2cloudless.
var NIR_DRK_THRESH = 0.15;  // Umbral para identificar píxeles "oscuros" en la banda NIR que no son agua (píxeles potenciales de sombra de nube).
var CLD_PRJ_DIST = 2;
var BUFFER = 10;
var start_year = 2022;
var end_year = 2022;
var SR_BAND_SCALE = 1e4;

// Configuraciones adicionales para el modelo
var model_inputs = {
    'percentileOptions': [50],
    'addJRCWater': false,  // ¿Incluir Variables de Agua JRC?
    'addTopography': false,// ¿Incluir Variables de Topografía?
    // Aquí pueden ir otras opciones de model_inputs.
};

// Fechas para la colección de imágenes
var start_date = '2022-01-01';
var end_date = '2022-06-31';

// Definir Área de Interés (AOI)
// var aoi = geometry;  // Esto estaba comentado, define un área piloto en la Amazonia Colombiana.
var aoi = Region_100K.first().geometry();  // AOI de Amazonia Colombiana

// Visualizar el área de la Amazonia Colombiana
Map.addLayer(Region_100K, {}, "Region_100K");
Map.centerObject(Region_100K);

// Función para obtener imágenes Sentinel-2 SR con Probabilidad de Nube.
// Esta función une las imágenes SR de Sentinel-2 con su correspondiente probabilidad de nube.
var get_s2_sr_cld_col = function(aoi, start_date, end_date) {
    // Importar y filtrar S2 SR.
    var s2_sr_col = ee.ImageCollection('COPERNICUS/S2_SR')
        .filterBounds(aoi)
        .filterDate(start_date, end_date)
        .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE', CLOUD_FILTER));

    // Importar y filtrar s2cloudless.
    var s2_cloudless_col = ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY')
        .filterBounds(aoi)
        .filterDate(start_date, end_date);

    // Unir la colección filtrada s2cloudless con la colección SR usando la propiedad 'system:index'.
    var join = ee.Join.saveFirst('s2cloudless');
    var filter = ee.Filter.equals({
        leftField: 'system:index',
        rightField: 'system:index'
    });

    return ee.ImageCollection(join.apply({
        primary: s2_sr_col,
        secondary: s2_cloudless_col,
        condition: filter
    }));
};

// Función para agregar bandas que indican la probabilidad de nubes y una máscara binaria de nubes a la imagen.
var add_cloud_bands = function(img) {
    var cld_prb = ee.Image(img.get('s2cloudless')).select('probability');
    var is_cloud = cld_prb.gt(CLD_PRB_THRESH).rename('clouds');
    return img.addBands(ee.Image([cld_prb, is_cloud]));
};

// Función para agregar bandas de sombras.
var add_shadow_bands = function(img) {
    // Aquí se identifican los píxeles que no son agua y se marcan los que son oscuros en la banda NIR.
    // Además, se transforman las nubes en función de la dirección del sol para detectar sombras de nubes.
    // ... (resto de código para agregar sombras) ...
};

// Función para agregar una máscara de nubes y sombras.
var add_cld_shdw_mask = function(img) {
    // ... (resto del código para agregar máscara) ...
};

// Función para aplicar la máscara de nubes y sombras.
var apply_cld_shdw_mask = function(img) {
    // ... (resto del código para aplicar máscara) ...
};

// Función para agregar NDVI.
var add_ndvi = function(img) {
    // ... (resto del código para agregar NDVI) ...
};

// Función para calcular el Índice de Vegetación Mejorado (EVI) para una imagen.
var calculateEVI = function(img) {
    // ... (resto del código para calcular EVI) ...
};

// Función que ejecuta todas las funciones anteriores y procesa las imágenes.
var s2process = function(aoi, start_year, end_year) {
    // ... (resto del código para procesar imágenes) ...
};

// Función para agregar altitud y pendiente del DEM a una imagen.
var addAltitudeAndSlope = function(img) {
    // ... (resto del código para agregar altitud y pendiente) ...
};

// Procesar datos satelitales dentro del AOI (ampliado en 100m).
var region = aoi.buffer(100);
var img = s2process(aoi, start_year, end_year);
var processedCollection = ee.Image(img);
img = addAltitudeAndSlope(processedCollection);
img = img.toFloat();
print(img);

// Exportar la imagen a un asset de Earth Engine.
Export.image.toAsset({
   // ... (resto del código para la exportación) ...
});

// Exportar la imagen a otro asset (temporal).
Export.image.toAsset({
   // ... (resto del código para la exportación temporal) ...
});

// Exportar la imagen a Google Drive.
Export.image.toDrive({
   // ... (resto del código para la exportación a Drive) ...
});

// Visualizar la imagen procesada.
//Map.addLayer(img.select('NDVI_p50'), {    min: -1, max: 1,    palette: ['blue', 'white', 'green'] }, 'Processed NDVI');
//Map.centerObject(aoi, 12);  // Centrar el mapa en el AOI con un nivel de zoom de 12.