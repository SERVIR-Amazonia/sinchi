exports.rf =function RFprim(trainingPts, testingPts,inputImage) {
    var trainingData = inputImage.sampleRegions({
        collection: trainingPts,
        properties: ['nivel_1'],
        scale: 20
    });
    print(" trainingData", trainingData);
    
    var testingData = inputImage.sampleRegions({
        collection: testingPts,
        properties: ['nivel_1'],
        scale: 20
    });
    //print(" testinggData", testingData)
    
    

    var classifier = ee.Classifier.smileRandomForest(100).train({
        features: trainingData,
        classProperty: 'nivel_1',
        inputProperties: inputImage.bandNames()
    });


    return {
        classified_image: inputImage.classify(classifier),
        rfclassifier: classifier,
        trainingData:testingData,
        testingData:testingData
        
    };
    
};

var formatPts=function (pts,clase) {
    // Turn a FC of training points containing full LC typology into a list of primitive point FCs, 
    // one point FC for each LC primitive

    // Create sets of binary training pts for each class represented in the full training pts collection
    var labels = ee.FeatureCollection(pts).aggregate_array(clase).distinct().sort();

    function binaryPts(l) {
        // Create prim and non prim sets with filters, reset prim to 1, non-prim to 0
        var prim = pts.filter(ee.Filter.eq(clase, l)).map(function(f) {
            return f.set('PRIM', 1);
        });
        var nonPrim = pts.filter(ee.Filter.neq(clase, l)).map(function(f) {
            return f.set('PRIM', 0);
        });
        return ee.FeatureCollection(prim).merge(nonPrim);
    }

    var listOfPrimPts = ee.List(labels).map(binaryPts);
    
    return listOfPrimPts;
};

exports.primitives_class=function(training_points,clase){
  var listOfPrimPts = formatPts(training_points,clase);
  print(listOfPrimPts);
  return listOfPrimPts;
  
  
};

exports.calculateConfusionMatrix = function(testingSet, RFclassifier) {
    var confusionMatrix = testingSet.classify(RFclassifier)
        .errorMatrix({
            actual: 'nivel_1',
            predicted: 'classification'
        });
        // Print the results.
      print('Confusion matrix:', confusionMatrix);
      print('Overall Accuracy:', confusionMatrix.accuracy());
      print('Producers Accuracy:', confusionMatrix.producersAccuracy());
      print('Consumers Accuracy:', confusionMatrix.consumersAccuracy());
      print('Kappa:', confusionMatrix.kappa());

    return confusionMatrix;
};

exports.importance=function(classifier){
  
  // Run .explain() to see what the classifer looks like
  print(classifier.explain());
  
  // Calculate variable importance
  var importance = ee.Dictionary(classifier.explain().get('importance'));
  
  // Calculate relative importance
  var sum = importance.values().reduce(ee.Reducer.sum());
  
  var relativeImportance = importance.map(function(key, val) {
     return (ee.Number(val).multiply(100)).divide(sum)
    });
  print(relativeImportance);
  
  // Create a FeatureCollection so we can chart it
  var importanceFc = ee.FeatureCollection([
    ee.Feature(null, relativeImportance)
  ]);
  
  var chart = ui.Chart.feature.byProperty({
    features: importanceFc
  }).setOptions({
        title: 'Feature Importance',
        vAxis: {title: 'Importance'},
        hAxis: {title: 'Feature'}
    });
  print(chart);
};