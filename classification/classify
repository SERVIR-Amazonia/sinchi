// Función para entrenar un clasificador Random Forest sencillo con datos de entrenamiento y prueba, y una imagen de entrada.


exports.rf =function RFprim(trainingPts, testingPts,inputImage) {
  // Preparar los datos de entrenamiento muestreando las clases de la imagen de entrada
  //Extrae bandas de la imangen de entrada como atributos
    var trainingData = inputImage.sampleRegions({
        collection: trainingPts,
        properties: ['nivel_1'],
        scale: 20
    });

    var testingData = inputImage.sampleRegions({
      // Preparar los datos de prueba muestreando las regiones de la imagen de entrada
        collection: testingPts,
        properties: ['nivel_1'],
        scale: 20
    });
    //print(" testingData", testingData)
    

    // Entrena el clasificador Random Forest
    var classifier = ee.Classifier.smileRandomForest(100).train({
      
        features: trainingData,
        classProperty: 'nivel_1',
        inputProperties: inputImage.bandNames()
    });

    // Retorna el resultado de la clasificación y los clasificadores
    return {
        classified_image: inputImage.classify(classifier),
        rfclassifier: classifier,
        trainingData:testingData,
        testingData:testingData
    };
    
};
/*
* Funciones para realizar la clasificación de coberturas usaando primitivos
*/


// Formatear puntos de entrenamiento 
var formatPts=function (pts,clase) {
    // Convertir una colección de puntos de entrenamiento con tipología completa de 
    //Cobertura de la tierra en una lista de colecciones de puntos para cada primitivo de Cobertura


    // Crear conjuntos de puntos de entrenamiento binarios para cada clase representada en la colección completa
    var labels = ee.FeatureCollection(pts).aggregate_array(clase).distinct().sort();
    function binaryPts(l) {
         // Crear conjuntos prim y non-prim con filtros, reiniciar prim a 1, non-prim a 0
        var prim = pts.filter(ee.Filter.eq(clase, l)).map(function(f) {
            return f.set('PRIM', 1);
        });
        var nonPrim = pts.filter(ee.Filter.neq(clase, l)).map(function(f) {
            return f.set('PRIM', 0);
        });
        return ee.FeatureCollection(prim).merge(nonPrim);
    }

    var listOfPrimPts = ee.List(labels).map(binaryPts);

    return listOfPrimPts;
};

//// Obtener las 20 covariables más importantes
var getTop20=function (dict) {
    // Si el total de características es menor a 20, tomarlas todas, de lo contrario tomar las 20 más importantes
    dict = ee.Dictionary(dict);
    var values = dict.values().sort();
    //print("values 107",values)
    var cutoff = ee.Algorithms.If(values.size().gte(20), -20, values.size().multiply(-1));
    
    function kvReturn(key, passedObj) {
        passedObj = ee.List(passedObj);
        var val = ee.Number(dict.get(key));
        var retObj = ee.Algorithms.If(val.gte(cutoff), passedObj.add(key), passedObj);
        return retObj;
    }

    var newList = dict.keys().iterate(kvReturn, ee.List([]));
    //print("newList 130",newList)
    return newList;
};



// Función para entrenar y aplicar el clasificador Random Forest en un primitivo
var RFprim=function (trainingPts,inputStack, label) {
    var inputs = ee.Image(inputStack);
    var samples = ee.FeatureCollection(trainingPts);
    
    // Aplicar esta función a todas las características en la colección
    //var linea160=samples.sort('PRIM', false);
    //var linea125=linea160.first();


    // Entrenar el clasificador Random Forest con parámetros específicos
    var classifier = ee.Classifier.smileRandomForest({
        numberOfTrees: 100,
        minLeafPopulation: 1,
        bagFraction: 0.7,
        seed: 51515
    }).setOutputMode('PROBABILITY');

    // Entrenar el modelo con todas las covariables
    var model = classifier.train({
        features: samples,
        classProperty: 'PRIM',
        inputProperties: inputs.bandNames()
    });
    
    // Almacenar los resultados del modelo para explorar el rendimiento
    var explain=model.explain();
    var oobAll = ee.Dictionary(model.explain()).get('outOfBagErrorEstimate');
    var importanceAll = ee.Dictionary(model.explain()).get('importance');

    // Obtener las 20 covariables más importantes
    var top20 = getTop20(importanceAll); // Ensure getTop20 function is defined in your script
    
    // Re-entrenar el modelo con las 20 características más importantes
    model = classifier.train({
        features: samples,
        classProperty: 'PRIM',
        inputProperties: top20
    });

    var oobTop20 = ee.Dictionary(model.explain()).get('outOfBagErrorEstimate');
    var importanceTop20 = ee.Dictionary(model.explain()).get('importance');
    var schema = ee.List(ee.Classifier(model).schema());
    var output = inputs.classify(model, 'Probability')
                    .set({
                        'Primitive': 'nivel_1',
                        'importance': importanceTop20,
                        'schema': schema,
                        'model': model,
                        'oobError': oobTop20
                    });
    return output;
};

exports.createLCPrimitiveCollection=function(inputStack, trainingPts, clase) {
    /*
    Create LC Primitive image for each LC class in training points.

    args:
        inputStack (ee.Image): of all covariates and predictor
        trainingPts (ee.FeatureCollection): training pts containing full LC typology
        className (str): property name in training points containing model classes
    
    returns:
        An object containing the ImageCollection, region, and training data
    */   
    inputStack = ee.Image(inputStack);
    trainingPts = ee.FeatureCollection(trainingPts);

    // list of distinct LANDCOVER values
    var labels = trainingPts.aggregate_array(clase).distinct().sort();
     var primList = ee.List([]);
     labels.getInfo().forEach(function(label) {
        var labelIndex = ee.Number.parse(label).subtract(1).toInt(); // Convertir la etiqueta a índice
        var formattedPtsList = formatPts(trainingPts, clase);

        var primPts = ee.FeatureCollection(formattedPtsList.get(labelIndex)); // Usar el índice para obtener los puntos
       // print("primPts 245",primPts);
        var img = RFprim(primPts, inputStack, label);
        primList = primList.add(img);
    });
    print("Lista de primitivos ",primList);
    return ee.ImageCollection.fromImages(primList);
};



//Assemeble max probability
exports.assembleMaxProbability=function (collection) {
  // Convert the image collection to a multiband image
  var image = collection.toBands();

  // Function to calculate the maximum probability classification
  function maxProb(image) {
    var maxProbClassification = image.toArray()
      .arrayArgmax()
      .arrayFlatten([['classification']])
      .rename('classification');
    return maxProbClassification;
  }

  // Calculate the maximum probability
  var maxProbability = maxProb(image);

  // Adjust for zero-based indexing and return the land cover image
  var output = maxProbability.add(1).rename('LANDCOVER');
  return output;
};



/////////////////////////
/// Validación ////

exports.calculateConfusionMatrixB =function(image, testingPts){
    var dataExtracted = image.sampleRegions({
        collection: testingPts,
        properties: ['nivel_1'],
        scale: 20,
        geometries: true // Esto mantiene la geometría original
    });
    var confusionMatrix = dataExtracted.errorMatrix({
            actual: 'nivel_1',
            predicted: 'LANDCOVER'
        });
        //PRINT RESULTS
        print('Confusion matrix:', confusionMatrix);
      print('Overall Accuracy:', confusionMatrix.accuracy());
      print('Producers Accuracy:', confusionMatrix.producersAccuracy());
      print('Consumers Accuracy:', confusionMatrix.consumersAccuracy());
      print('Kappa:', confusionMatrix.kappa());
};

exports.calculateConfusionMatrix = function(testingSet, RFclassifier) {
    var confusionMatrix = testingSet.classify(RFclassifier)
        .errorMatrix({
            actual: 'nivel_1',
            predicted: 'classification'
        });
        // Print the results.
      print('Confusion matrix simple RF:', confusionMatrix);
      print('Overall Accuracy simple RF:', confusionMatrix.accuracy());
      print('Producers Accuracy RF:', confusionMatrix.producersAccuracy());
      print('Consumers Accuracy RF:', confusionMatrix.consumersAccuracy());
      print('Kappa RF:', confusionMatrix.kappa());

    return confusionMatrix;
};


exports.importance=function(classifier){
  
  // Run .explain() to see what the classifer looks like
  print(classifier.explain());
  
  // Calculate variable importance
  var importance = ee.Dictionary(classifier.explain().get('importance'));
  
  // Calculate relative importance
  var sum = importance.values().reduce(ee.Reducer.sum());
  
  var relativeImportance = importance.map(function(key, val) {
     return (ee.Number(val).multiply(100)).divide(sum);
    });
  print(relativeImportance);
  
  // Create a FeatureCollection so we can chart it
  var importanceFc = ee.FeatureCollection([
    ee.Feature(null, relativeImportance)
  ]);
  
  var chart = ui.Chart.feature.byProperty({
    features: importanceFc
  }).setOptions({
        title: 'Feature Importance',
        vAxis: {title: 'Importance'},
        hAxis: {title: 'Feature'}
    });
  print(chart);
};