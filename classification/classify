// Ejecutar la funci√≥n y recibe los resultados
var module_extract_samples = require('users/an-sig/sinchi:classification/module_extract_samples');

var visualizationResults = module_extract_samples.executeAndVisualize();
var balanceAndApplyCorrelation=module_extract_samples.balanceAndApplyCorrelation;


// Traer puntos de muestreo para semestre 1 
//Tenemos unafeature collection para muestreos de entrenamiento y validacion
//el atributo (columna) a traves del cual se hara la cllasificacion es nivel_1
var S1_training=visualizationResults.combinedResults_S1.training;
var format_pts=function (pts) {
    var labels = ee.FeatureCollection(pts)
        .aggregate_array('nivel_1')
        .distinct()
        .sort();

    function binaryPts(l) {
        var prim = pts.filter(ee.Filter.eq('nivel_1', l))
                     .map(function(f) { return f.set('PRIM', 1); });
        var nonPrim = pts.filter(ee.Filter.neq('nivel_1', l))
                         .map(function(f) { return f.set('PRIM', 0); });
        return ee.FeatureCollection(prim).merge(nonPrim);
    }
    format_pts_output=ee.List(labels).map(binaryPts)
    print("format_pts_output",format_pts_output)
    return format_pts_output;
};

var var_a=format_pts(S1_training)

print("var_a",var_a)
var getTop20=function (dict) {
    var sortedValues = ee.Dictionary(dict).values().sort();
    var cutoff = ee.Algorithms.If(sortedValues.size().gte(20), -20, sortedValues.size().multiply(-1));

    function kvReturn(key, passedObj) {
        var val = ee.Number(ee.Dictionary(dict).get(key));
        return ee.Algorithms.If(val.gte(cutoff), ee.List(passedObj).add(key), passedObj);
    }

    var keys = ee.Dictionary(dict).keys();
    return keys.iterate(kvReturn, ee.List([]));
}

var RFprim= function (trainingPts, inputStack) {
    var inputs = ee.Image(inputStack);
    var samples = ee.FeatureCollection(trainingPts);

    var classValue = ee.Number(ee.Feature(samples.sort('PRIM', false).first()).get('nivel_1'));

    var classifier = ee.Classifier.smileRandomForest({
        numberOfTrees: 100,
        minLeafPopulation: 1,
        bagFraction: 0.7,
        seed: 51515
    }).setOutputMode('PROBABILITY');

    var model = classifier.train({
        features: samples,
        classProperty: 'PRIM',
        inputProperties: inputs.bandNames()
    });

    var oobAll = ee.Dictionary(model.explain()).get('outOfBagErrorEstimate');
    var importanceAll = ee.Dictionary(model.explain()).get('importance');

    var top20 = getTop20(importanceAll);

    model = classifier.train({
        features: samples,
        classProperty: 'PRIM',
        inputProperties: top20
    });

    var oobTop20 = ee.Dictionary(model.explain()).get('outOfBagErrorEstimate');
    var importanceTop20 = ee.Dictionary(model.explain()).get('importance');
    var schema = ee.List(ee.Classifier(model).schema());
    var output = inputs.classify(model, 'Probability')
        .set({
            'Primitive': classValue,
            'importance': importanceTop20,
            'schema': schema,
            'model': model,
            'oobError': oobTop20
        });

    return output;
}


var primitivesToCollection =function (inputStack, trainingPts, className) {
    var inputStack = ee.Image(inputStack);
    var trainingPts = ee.FeatureCollection(trainingPts);

    var labels = trainingPts.aggregate_array(className).distinct().sort();

    var primList = labels.map(function(label) {
        var primPts = formatPts(trainingPts).get(label);
        return RFprim(primPts, inputStack);
    });

    return ee.ImageCollection.fromImages(primList);
}

Primitives.prototype.assembleMaxProbability = function() {
    function maxProb(image) {
        return image.toArray()
            .arrayArgmax()
            .arrayFlatten([['classification']])
            .rename('classification');
    }

    var image = this.collection.toBands();
    var maxProbability = maxProb(image);
    return maxProbability.add(1).rename('LANDCOVER');
}