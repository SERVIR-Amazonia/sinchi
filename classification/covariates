function Indices() {

      this.functionList = {
        "ND_blue_green": this.ND_blue_green,
        "ND_blue_red": this.ND_blue_red,
        "ND_blue_nir": this.ND_blue_nir,
        "ND_blue_swir1": this.ND_blue_swir1,
        "ND_blue_swir2": this.ND_blue_swir2,
        "ND_green_red": this.ND_green_red,
        "ND_green_nir": this.ND_green_nir,
        "ND_green_swir1": this.ND_green_swir1,
        "ND_green_swir2": this.ND_green_swir2,
        "ND_red_swir1": this.ND_red_swir1,
        "ND_red_swir2": this.ND_red_swir2,
        "ND_nir_red": this.ND_nir_red,
        "ND_nir_swir1": this.ND_nir_swir1,
        "ND_nir_swir2": this.ND_nir_swir2,
        "ND_swir1_swir2": this.ND_swir1_swir2,
        "R_swir1_nir": this.R_swir1_nir,
        "R_red_swir1": this.R_red_swir1,
        "EVI": this.EVI,
        "SAVI": this.SAVI,
        "IBI": this.IBI
    };

  this.ND_blue_green = function(img) {
        return img.addBands(img.normalizedDifference(['blue', 'green']).rename(['ND_blue_green']));
    };

    this.ND_blue_red = function(img) {
        return img.addBands(img.normalizedDifference(['blue', 'red']).rename(['ND_blue_red']));
    };

    this.ND_blue_nir = function(img) {
        return img.addBands(img.normalizedDifference(['blue', 'nir']).rename(['ND_blue_nir']));
    };

    this.ND_swir1_swir2 = function(img) {
        return img.addBands(img.normalizedDifference(['swir1', 'swir2']).rename(['ND_swir1_swir2']));
    };

    this.R_swir1_nir = function(img) {
        return img.addBands(img.select('swir1').divide(img.select('nir')).rename(['R_swir1_nir']));
    };

    this.R_red_swir1 = function(img) {
        return img.addBands(img.select('red').divide(img.select('swir1')).rename(['R_red_swir1']));
    };


    // Funci√≥n para estimar EVI y agregarlo como banda.
    this.EVI_corregido = function(img) {
      var evi = img.expression(
        '2.5 * (((NIR/10000) - (Red/10000)) / ((NIR/10000) + 6 * (Red/10000) - 7.5 * (Blue/10000) + 1))', {
          'NIR': img.select('nir'),
          'Red': img.select('red'),
          'Blue': img.select('blue')
        });
      return img.addBands(evi.rename('EVI'));
    };



    this.EVI = function(img) {
        var evi = img.expression(
            '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
                'NIR': img.select('nir'),
                'RED': img.select('red'),
                'BLUE': img.select('blue')
            }).float();
        return img.addBands(evi.rename(['EVI']));
    };

    this.SAVI = function(img) {
        var savi = img.expression(
            '(NIR - RED) * (1 + 0.5)/(NIR + RED + 0.5)', {
                'NIR': img.select('nir'),
                'RED': img.select('red')
            }).float();
        return img.addBands(savi.rename(['SAVI']));
    };

    this.IBI = function(img) {
        var ibi_a = img.expression(
            '2 * SWIR1 / (SWIR1 + NIR)', {
                'SWIR1': img.select('swir1'),
                'NIR': img.select('nir')
            }).rename(['IBI_A']);

        var ibi_b = img.expression(
            '(NIR / (NIR + RED)) + (GREEN / (GREEN + SWIR1))', {
                'NIR': img.select('nir'),
                'RED': img.select('red'),
                'GREEN': img.select('green'),
                'SWIR1': img.select('swir1')
            }).rename(['IBI_B']);

        var ibi = ibi_a.addBands(ibi_b).normalizedDifference(['IBI_A', 'IBI_B']);
        return img.addBands(ibi.rename(['IBI']));
    };

    this.addTopography = function(img) {
        var elevation = ee.Image("USGS/SRTMGL1_003");
        var topo = ee.Algorithms.Terrain(elevation);
        var deg2rad = ee.Number(Math.PI / 180);
        var aspect = topo.select(['aspect']);
        var aspect_rad = aspect.multiply(deg2rad);
        var eastness = aspect_rad.sin().rename(['getiin']).float();
        var northness = aspect_rad.cos().rename(['northness']).float();
        topo = topo.select(['elevation', 'slope', 'aspect']).addBands(eastness).addBands(northness);
        return img.addBands(topo);
    };
    
    
 this.getIndices = function(img, covariates) {
    var self = this; // Guardar una referencia a this
    covariates.forEach(function(item) {
        if (self.functionList[item]) {
            img = self.functionList[item](img);
        }
    });
    return img;
};
    this.removeDuplicates = function(covariateList, bands) {
        return covariateList.filter(function(elem) {
            return bands.indexOf(elem) === -1;
        });
    };

    this.renameBands = function(image, prefix) {
        var bandnames = image.bandNames();
        var newBandnames = bandnames.map(function(band) {
            return ee.String(prefix).cat('_').cat(band);
        });
        return image.rename(newBandnames);
    };
    
}

function change_name_bands (img, wildcard){
  var bandNames = img.bandNames()
  // Remove a specific character (e.g., '_') from each band name
  var modifiedBandNames = img.bandNames().map(function(name) {
    return ee.String(name).replace(wildcard, ''); // Replace '_' with an empty string
    
  });
  // Rename bands
  var renamedImage = img.rename(modifiedBandNames);
  return renamedImage;
    
}

function returnCovariates(img) {
    var bands = ['blue', 'green', 'red', 'nir', 'swir1', 'swir2'];
    var bandLow = ['blue_p20', 'green_p20', 'red_p20', 'nir_p20', 'swir1_p20', 'swir2_p20'];
    var bandHigh = ['blue_p80', 'green_p80', 'red_p80', 'nir_p80', 'swir1_p80', 'swir2_p80'];
    var bandMedian = ['blue_p50', 'green_p50', 'red_p50', 'nir_p50', 'swir1_p50', 'swir2_p50'];

    var covariates = ["ND_blue_green", "ND_blue_red", "ND_blue_nir", "ND_blue_swir1", "ND_blue_swir2",
                      "ND_green_red", "ND_green_nir", "ND_green_swir1", "ND_green_swir2", "ND_red_swir1",
                      "ND_red_swir2", "ND_nir_red", "ND_nir_swir1", "ND_nir_swir2", "ND_swir1_swir2",
                      "R_swir1_nir", "R_red_swir1", "EVI", "SAVI", "IBI"];

    var indicesInstance = new Indices();

    function scaleSentinel(image) {
        
        var otherBands = image.bandNames();
        var scaled = image.select(otherBands).multiply(0.0001);
        return scaled;
    }

    img = scaleSentinel(img);

    function addIndices(image) {
        image = indicesInstance.getIndices(image, covariates);
        image = indicesInstance.ND_blue_green(image).unmask(0)
        image = indicesInstance.addTopography(image).unmask(0);
        return image;
    }

    
    var bandNames = img.bandNames();
   print("bandNames down",bandNames)
    var down = img.select(bandLow);
    var down=change_name_bands (down, 'p_20');
    print("down",down)
    var down_composition=addIndices(down);
    
    var high= img.select(bandHigh);
    var high=change_name_bands (high, 'p_80');
    var high_composition=addIndices(high);
    
    var middle= img.select(bandMedian);
    var middle=change_name_bands (middle, 'p_50');
    var middle_composition=addIndices(middle);


    img = middle_composition;
    print("img",img)
    return img;
}

// Exporting functions

exports.returnCovariates=returnCovariates;
exports.Indices = Indices;