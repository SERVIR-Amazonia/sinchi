function Indices() {

      this.functionList = {
        "ND_blue_green": this.ND_blue_green,
        "ND_blue_red": this.ND_blue_red,
        "ND_blue_nir": this.ND_blue_nir,
        "ND_blue_swir1": this.ND_blue_swir1,
        "ND_blue_swir2": this.ND_blue_swir2,
        "ND_green_red": this.ND_green_red,
        "ND_green_nir": this.ND_green_nir,
        "ND_green_swir1": this.ND_green_swir1,
        "ND_green_swir2": this.ND_green_swir2,
        "ND_red_swir1": this.ND_red_swir1,
        "ND_red_swir2": this.ND_red_swir2,
        "ND_nir_red": this.ND_nir_red,
        "ND_nir_swir1": this.ND_nir_swir1,
        "ND_nir_swir2": this.ND_nir_swir2,
        "ND_swir1_swir2": this.ND_swir1_swir2,
        "R_swir1_nir": this.R_swir1_nir,
        "R_red_swir1": this.R_red_swir1,
        "EVI": this.EVI,
        "SAVI": this.SAVI,
        "IBI": this.IBI
    };

  this.ND_blue_green = function(img) {
        return img.addBands(img.normalizedDifference(['blue', 'green']).rename(['ND_blue_green']));
    };

    this.ND_blue_red = function(img) {
        return img.addBands(img.normalizedDifference(['blue', 'red']).rename(['ND_blue_red']));
    };

    this.ND_blue_nir = function(img) {
        return img.addBands(img.normalizedDifference(['blue', 'nir']).rename(['ND_blue_nir']));
    };

    // ... Continuar con las demÃ¡s funciones ...

    this.ND_swir1_swir2 = function(img) {
        return img.addBands(img.normalizedDifference(['swir1', 'swir2']).rename(['ND_swir1_swir2']));
    };

    this.R_swir1_nir = function(img) {
        return img.addBands(img.select('swir1').divide(img.select('nir')).rename(['R_swir1_nir']));
    };

    this.R_red_swir1 = function(img) {
        return img.addBands(img.select('red').divide(img.select('swir1')).rename(['R_red_swir1']));
    };

    this.EVI = function(img) {
        var evi = img.expression(
            '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
                'NIR': img.select('nir'),
                'RED': img.select('red'),
                'BLUE': img.select('blue')
            }).float();
        return img.addBands(evi.rename(['EVI']));
    };

    this.SAVI = function(img) {
        var savi = img.expression(
            '(NIR - RED) * (1 + 0.5)/(NIR + RED + 0.5)', {
                'NIR': img.select('nir'),
                'RED': img.select('red')
            }).float();
        return img.addBands(savi.rename(['SAVI']));
    };

    this.IBI = function(img) {
        var ibi_a = img.expression(
            '2 * SWIR1 / (SWIR1 + NIR)', {
                'SWIR1': img.select('swir1'),
                'NIR': img.select('nir')
            }).rename(['IBI_A']);

        var ibi_b = img.expression(
            '(NIR / (NIR + RED)) + (GREEN / (GREEN + SWIR1))', {
                'NIR': img.select('nir'),
                'RED': img.select('red'),
                'GREEN': img.select('green'),
                'SWIR1': img.select('swir1')
            }).rename(['IBI_B']);

        var ibi = ibi_a.addBands(ibi_b).normalizedDifference(['IBI_A', 'IBI_B']);
        return img.addBands(ibi.rename(['IBI']));
    };

    this.addTopography = function(img) {
        var elevation = ee.Image("USGS/SRTMGL1_003");
        var topo = ee.Algorithms.Terrain(elevation);
        var deg2rad = ee.Number(Math.PI / 180);
        var aspect = topo.select(['aspect']);
        var aspect_rad = aspect.multiply(deg2rad);
        var eastness = aspect_rad.sin().rename(['eastness']).float();
        var northness = aspect_rad.cos().rename(['northness']).float();
        topo = topo.select(['elevation', 'slope', 'aspect']).addBands(eastness).addBands(northness);
        return img.addBands(topo);
    };
    
    
    this.getIndices = function(img, covariates) {
        var self = this;
        covariates.forEach(function(item) {
            img = self.functionList[item](img);
        });
        return img;
    };
    this.removeDuplicates = function(covariateList, bands) {
        return covariateList.filter(function(elem) {
            return bands.indexOf(elem) === -1;
        });
    };

    this.renameBands = function(image, prefix) {
        var bandnames = image.bandNames();
        var newBandnames = bandnames.map(function(band) {
            return ee.String(prefix).cat('_').cat(band);
        });
        return image.rename(newBandnames);
    };
    
}
function returnCovariates(img) {
    // Bands and covariates hardcoded inside the function
    var bands = ['blue', 'green', 'red', 'nir', 'swir1', 'swir2'];
    var bandLow = ['p20_blue', 'p20_green', 'p20_red', 'p20_nir', 'p20_swir1', 'p20_swir2'];
    var bandHigh = ['p80_blue', 'p80_green', 'p80_red', 'p80_nir', 'p80_swir1', 'p80_swir2'];
    var bandmedian = ['blue_p50', 'green_p50', 'red_p50', 'nir_p50', 'swir1_p50', 'swir2_p50'];


    // List of covariate names
    var covariates = ["ND_blue_green", "ND_blue_red", "ND_blue_nir", "ND_blue_swir1", "ND_blue_swir2",
                      "ND_green_red", "ND_green_nir", "ND_green_swir1", "ND_green_swir2", "ND_red_swir1",
                      "ND_red_swir2", "ND_nir_red", "ND_nir_swir1", "ND_nir_swir2", "ND_swir1_swir2",
                      "R_swir1_nir", "R_red_swir1", "EVI", "EVI_corrected","SAVI", "IBI"];

     var indicesInstance = new Indices();

    function addIndices(image, prefix, bandsList) {
        image = indicesInstance.getIndices(image, indicesInstance.removeDuplicates(covariates, bandsList));
        image = indicesInstance.addJRC(image).unmask(0);
        image = indicesInstance.addTopography(image).unmask(0);
        if (prefix.length > 0) {
            image = indicesInstance.renameBands(image, prefix);
        }
        return image;
    }

    var bandNames = img.bandNames();
    var down = addIndices(img.select(bandLow), "p20", bandNames);
    var middle = addIndices(img.select(bands), "", bandNames);
    var up = addIndices(img.select(bandHigh), "p80", bandNames);

    img = down.addBands(middle).addBands(up);

    return img;
}

// Exporting functions
exports.ND_blue_green = ND_blue_green;
exports.ND_blue_red = ND_blue_red;
exports.ND_blue_nir = ND_blue_nir;
exports.ND_blue_swir1 = ND_blue_swir1;
exports.ND_blue_swir2 = ND_blue_swir2;
exports.ND_green_red = ND_green_red;
exports.ND_green_nir = ND_green_nir;
exports.ND_green_swir1 = ND_green_swir1;
exports.ND_green_swir2 = ND_green_swir2;
exports.ND_red_swir1 = ND_red_swir1;
exports.ND_red_swir2 = ND_red_swir2;
exports.ND_nir_red = ND_nir_red;
exports.ND_nir_swir1 = ND_nir_swir1;
exports.ND_nir_swir2 = ND_nir_swir2;
exports.ND_swir1_swir2 = ND_swir1_swir2;
exports.R_swir1_nir = R_swir1_nir;
exports.R_red_swir1 = R_red_swir1;
exports.EVI = EVI;
exports.EVI_corrected=EVI_corrected;
exports.SAVI = SAVI;
exports.IBI = IBI;
exports.addTopography = addTopography;
exports.returnCovariates=returnCovariates;