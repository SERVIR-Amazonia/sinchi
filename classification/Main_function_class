var miModulo = require('users/an-sig/sinchi:classification/Module_extract_samples');

// Ejecutar la funci√≥n y recibe los resultados
var visualizationResults = miModulo.executeAndVisualize();
var balanceAndApplyCorrelation=miModulo.balanceAndApplyCorrelation


// Traer puntos de muestreo para semestre 1 
//Tenemos unafeature collection para muestreos de entrenamiento y validacion
//el atributo (columna) a traves del cual se hara la cllasificacion es nivel_1
var S1_training=visualizationResults.combinedResults_S1.training;
var S1_ttesting=visualizationResults.combinedResults_S1.testing



// Correr RF
function RFprim(trainingPts, inputImage) {
    var trainingData = inputImage.sampleRegions({
        collection: trainingPts,
        properties: ['nivel_1'],
        scale: 30
    });

    var classifier = ee.Classifier.smileRandomForest(100).train({
        features: trainingData,
        classProperty: 'nivel_1',
        inputProperties: inputImage.bandNames()
    });

    return inputImage.classify(classifier);
}

// Entrenar el clasificador con los puntos de entrenamiento
var classifiedImage = RFprim(S1_training, inputImage);



// Mostrar los resultados
print("combinedResults_S1.training", visualizationResults.combinedResults_S1.training);
print("combinedResults_S1.testing", visualizationResults.combinedResults_S1.testing);
print("combinedResults_S2.training", visualizationResults.combinedResults_S2.training);
print("combinedResults_S2.testing", visualizationResults.combinedResults_S2.testing);

// Agregar las capas de los puntos de muestreo al mapa
Map.addLayer(visualizationResults.combinedResults_S1.training, {color: 'blue'}, 'Training Points S1');
Map.addLayer(visualizationResults.combinedResults_S1.testing, {color: 'red'}, 'Testing Points S1');
Map.addLayer(visualizationResults.combinedResults_S2.training, {color: 'green'}, 'Training Points S2');
Map.addLayer(visualizationResults.combinedResults_S2.testing, {color: 'yellow'}, 'Testing Points S2');

// Centrar el mapa en uno de los conjuntos de puntos
Map.centerObject(visualizationResults.combinedResults_S1.training);