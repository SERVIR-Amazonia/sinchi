var geometry = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-71.40636212919651, -0.4545955909329242],
          [-71.36415599236246, -0.45013054834153504],
          [-71.32606965500655, -0.44497859961377856],
          [-71.32193136734023, -0.37118095318751787],
          [-71.4135881996886, -0.37667056564592793]]]),
    Region_100K = ee.FeatureCollection("projects/pc300-samz-sinchi/assets/Region_100K");

var aoi = Region_100K.first().geometry();

//Decalrar variables
var start_year = 2022;
var start_month = 7;
var start_day = 1;
var end_year = 2022;
var end_month = 12;
var end_day = 31;


var miModulo = require('users/an-sig/sinchi:classification/Module_extract_samples');
var moduloComposite= require('users/an-sig/sinchi:classification/composition');
var moduloCovariates= require('users/an-sig/sinchi:classification/covariates');

// Ejecutar la funci√≥n y recibe los resultados
var visualizationResults = miModulo.executeAndVisualize();
var balanceAndApplyCorrelation=miModulo.balanceAndApplyCorrelation


// Traer puntos de muestreo para semestre 1 
//Tenemos unafeature collection para muestreos de entrenamiento y validacion
//el atributo (columna) a traves del cual se hara la cllasificacion es nivel_1
var S1_training=visualizationResults.combinedResults_S1.training;
var S1_testing=visualizationResults.combinedResults_S1.testing


var processedImage = moduloComposite.s2process(aoi, start_year, end_year, start_month, start_day,end_month, end_day);
var image_covariates=moduloCovariates.returnCovariates(processedImage)
//print("image_covariates",image_covariates);
print("image_covariates",image_covariates)

// Correr RF
function RFprim(trainingPts, inputImage) {
    var trainingData = inputImage.sampleRegions({
        collection: trainingPts,
        properties: ['nivel_1'],
        scale: 30
    });

    var classifier = ee.Classifier.smileRandomForest(100).train({
        features: trainingData,
        classProperty: 'nivel_1',
        inputProperties: inputImage.bandNames()
    });

    return inputImage.classify(classifier);
}

// Entrenar el clasificador con los puntos de entrenamiento
var classifiedImage = RFprim(S1_training, processedImage);



// Mostrar los resultados
print("combinedResults_S1.training", visualizationResults.combinedResults_S1.training);
print("combinedResults_S1.testing", visualizationResults.combinedResults_S1.testing);
//print("combinedResults_S2.training", visualizationResults.combinedResults_S2.training);
//print("combinedResults_S2.testing", visualizationResults.combinedResults_S2.testing);

// Agregar las capas de los puntos de muestreo al mapa
Map.addLayer(visualizationResults.combinedResults_S1.training, {color: 'blue'}, 'Training Points S1');
Map.addLayer(visualizationResults.combinedResults_S1.testing, {color: 'red'}, 'Testing Points S1');
//Map.addLayer(visualizationResults.combinedResults_S2.training, {color: 'green'}, 'Training Points S2');
//Map.addLayer(visualizationResults.combinedResults_S2.testing, {color: 'yellow'}, 'Testing Points S2');

// Centrar el mapa en uno de los conjuntos de puntos
Map.centerObject(visualizationResults.combinedResults_S1.training);