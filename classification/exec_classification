/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPoint();
/***** End of imports. If edited, may not auto-convert in the playground. *****/



//Importar módulos
var modulo_classifier=require('users/an-sig/sinchi:classification/classify');
var moduloExecPrepData=require('users/an-sig/sinchi:classification/exe_prepare_data');

//// Obtener variables desde el módulo de preparación de datos
var clase =moduloExecPrepData.clase;
var semestre =moduloExecPrepData.semestre;
var TrainingDataPath=moduloExecPrepData.TrainingDataPath;
var TestingDataPath=moduloExecPrepData.TestingDataPath;
var image_covariatesPath=moduloExecPrepData.image_covariatesPath;
var Region_100K =moduloExecPrepData.Region_100K;
var geometry_test=moduloExecPrepData.geometry_test;
var region=geometry_test;
var ano=moduloExecPrepData.end_year


var CoberturaTierra = ('projects/pc300-samz-sinchi/assets/coberturas/'
      +semestre+'_'+ ano); 
var geometry = region;


// Cargar los datos de entrenamiento y prueba y la imagen de covariables
//almacenados en un asset

var trainingDataUpdated = ee.FeatureCollection(TrainingDataPath)
var testingDataBalanced = ee.FeatureCollection(TestingDataPath)
var image_covariates = ee.Image(image_covariatesPath)

//Crear colección de imágenes de las clases de cobertura de tierra (primitivos)
var primitives=modulo_classifier.createLCPrimitiveCollection(image_covariates, trainingDataUpdated, clase) ;

// Convertir colección de primitivos en una imagen multibanda
var multibandImage = primitives.toBands();


//Assemble max
var assembleMax=modulo_classifier.assembleMaxProbability(primitives);


// Función para añadir una imagen y su leyenda al mapa
function addImageWithLegend(image, palette, names, min, max, layerName) {
    // Añade la imagen al mapa con la paleta de colores
    Map.addLayer(image, {min: min, max: max, palette: palette}, layerName);

    // Crear una leyenda
    var legend = ui.Panel({
        style: {
            position: 'bottom-left',
            padding: '8px 15px'
        }
    });

    // Función para agregar los elementos de la leyenda
    var addLegendItem = function(color, name) {
        var colorBox = ui.Label({
            style: {
                backgroundColor: color,
                // Asegúrate de que el tamaño de la caja de color sea suficiente
                padding: '8px',
                margin: '0 0 4px 0'
            }
        });

        var description = ui.Label({
            value: name,
            style: { margin: '0 0 4px 6px' }
        });

        return ui.Panel({
            widgets: [colorBox, description],
            layout: ui.Panel.Layout.Flow('horizontal')
        });
    };

    // Agregar los elementos de la leyenda
    palette.forEach(function(color, index) {
        legend.add(addLegendItem(color, names[index]));
    });

    // Añadir la leyenda al mapa
    Map.add(legend);
}

// Ejecutar la funcion
var classifiedImage = ee.Image(assembleMax); // Reemplaza 'tu_imagen_aqui' con el ID de tu imagen


//Matriz de confusion y metricas para clasificador usando primitivos
modulo_classifier.calculateConfusionMatrixB(assembleMax, testingDataBalanced)

//Exportar imagen con superficie de clasificación

Export.image.toAsset({
    image: classifiedImage,
    description: 'Imagen_clasificada',
    assetId: CoberturaTierra, 
    scale: 20,
    region: geometry_test, 
    maxPixels: 1e9 
});

