// Función para calcular la exactitud
exports.calculateAccuracy = function(classified_image_S1, S1_testing) {
    var S1_testing_classified = classified_image_S1.sampleRegions({
        collection: S1_testing,
        scale: 20,
        geometries: true
    });

    var combineValues = function(feature) {
        var nivel_1 = feature.get('nivel_1');
        var classification = feature.get('classification');
        return ee.Feature(null, {
            'nivel_1': nivel_1,
            'classification': classification
        });
    };

    var separateValues = S1_testing_classified.map(combineValues);

    var nivel_1List = separateValues.aggregate_array('nivel_1');
    var classificationList = separateValues.aggregate_array('classification');

    var calculateMetrics = function(nivel_1List, classificationList) {
         var matrix = {};
    var total = 0;
    var correct = 0;
    var classCounts = {};

    nivel_1List.forEach(function(n1, index) {
        var classPred = classificationList[index];
        var key = n1 + '-' + classPred;
        matrix[key] = (matrix[key] || 0) + 1;

        // Count correct predictions
        if (n1 === classPred) {
            correct++;
        }

        // Initialize class counts
        classCounts[n1] = classCounts[n1] || {total: 0, correct: 0, predicted: 0};
        classCounts[classPred] = classCounts[classPred] || {total: 0, correct: 0, predicted: 0};

        // Increment class counts
        classCounts[n1].total++;
        classCounts[classPred].predicted++;
        if (n1 === classPred) {
            classCounts[n1].correct++;
        }

        total++;
    });

    // Calculate accuracy and errors
    var accuracy = correct / total;
    var commissionErrors = {};
    var omissionErrors = {};
    Object.keys(classCounts).forEach(function(c) {
        commissionErrors[c] = 1 - (classCounts[c].correct / (classCounts[c].predicted || 1));
        omissionErrors[c] = 1 - (classCounts[c].correct / classCounts[c].total);
    });

    return {
        confusionMatrix: matrix,
        accuracy: accuracy,
        commissionErrors: commissionErrors,
        omissionErrors: omissionErrors
    };
    };

    // Devuelve los resultados de calcular las métricas
    return nivel_1List.evaluate(function(n1Values) {
        classificationList.evaluate(function(classificationValues) {
          var results = calculateMetrics(n1Values, classificationValues);
          // Usa los resultados aquí dentro
          print('Results:', results);
          
        });
    });
};


